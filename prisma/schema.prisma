// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}
enum QuestionType {
  radio
  checkbox
  task
  text
  input
}

enum UserRole {
  admin
  user
  manager
  mentor
}

model User {
  id         Int         @id @default(autoincrement())
  interviews Interview[]
  role       UserRole    @default(user)

  firstName  String?
  lastName   String?
  username   String?
  authDate   DateTime
  photoUrl   String?
  telegramId Int      @unique

  firstLoginAt DateTime  @default(now())
  lastVisitAt  DateTime  @default(now())
  Session      Session[]
}

model Session {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  tgHash String
  token  String
}

model Interview {
  id       Int  @id @default(autoincrement())
  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  interviewQuestions InterviewQuestion[]
  categories         Category[]

  direction   Direction @relation(fields: [directionId], references: [id])
  directionId Int
}

model Question {
  id    Int          @id @default(autoincrement())
  type  QuestionType
  text  String
  title String

  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  direction   Direction @relation(fields: [directionId], references: [id])
  directionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  answers            Answer[]
  interviewQuestions InterviewQuestion[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  text      String
  isCorrect Boolean?

  correctValue String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int

  interviewAnswers InterviewQuestionAnswer[]
}

model Direction {
  id    Int    @id @default(autoincrement())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Questions  Question[]
  Interviews Interview[]
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  questions  Question[]
  interviews Interview[]
}

model InterviewQuestion {
  id          Int       @id @default(autoincrement())
  position    Int
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId Int
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  Int

  interviewQuestionAnswers InterviewQuestionAnswer[]
}

model InterviewQuestionAnswer {
  id         Int      @id @default(autoincrement())
  answeredAt DateTime @default(now())

  answer   Answer @relation(fields: [answerId], references: [id])
  answerId Int

  interviewQuestion   InterviewQuestion @relation(fields: [interviewQuestionId], references: [id])
  interviewQuestionId Int
}
