// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  radio
  checkbox
  task
  text
  input
}

enum UserRole {
  admin
  user
  manager
  mentor
}

model User {
  id    Int    @id @default(autoincrement())
  interviews Interview[]
  role UserRole @default(user)

  firstLoginAt DateTime @default(now())
  lastVisitAt DateTime @default(now())

  sessions Session[]
}

model Session {
  id    Int    @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int

  token String
}

model Interview {
  id    Int    @id @default(autoincrement())
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  startedAt DateTime @default(now())
  completedAt DateTime?

  interviewQuestions InterviewQuestion[]
  categories Category[]
}

model Question {
  id    Int    @id @default(autoincrement())
  type QuestionType
  text String

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int  @unique
  direction Direction @relation(fields: [directionId], references: [id])
  directionId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  interviewQuestions InterviewQuestion[]
}

model Answer {
  id    Int    @id @default(autoincrement())
  text String
  isCorrect Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  interviewAnswer InterviewQuestionAnswer?
 }

model Direction {
  id    Int    @id @default(autoincrement())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Questions Question[]
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  questions Question[]
  interviews Interview[]
}

model InterviewQuestion {
  position Int
  createdAt DateTime @default(now())
  completedAt DateTime?

  interview Interview @relation(fields: [interviewId], references: [id])
  interviewId Int  @unique
  question Question @relation(fields: [questionId], references: [id])
  questionId Int  @unique

  @@id([interviewId, questionId])
}

model InterviewQuestionAnswer {
  id    Int    @id @default(autoincrement())
  answeredAt DateTime @default(now())


  answer Answer @relation(fields: [answerId], references: [id])
  answerId Int  @unique
}
